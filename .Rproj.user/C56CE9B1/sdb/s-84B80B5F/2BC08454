{
    "contents" : "---\ntitle: \"Machine Learning Project\"\nauthor: \"Doug Gorman\"\ndate: \"Thursday, February 19, 2015\"\noutput: html_document\n---\n\n### Synopsis \nThis project focuses on using a machine learning algorithm to predict the manner in which a person completes a bumbbell bicep curl. Six subjects were given instruction for completing the dumbbell curl according to specifications matching one of the following classifications:  \n- A: Good Form  \n- B: Throwing elbows to the front  \n- C: Lifting the dumbbell only half way  \n- D: Lowering the dumbell only half way  \n- E: Throwing hips to the front    \n\nApplications in this area would include computer feedback for the user letting them know how they may be improperly executing the exercise so the behavior could be corrected.  The data set and a paper from the experimentors is available here \n[Source Paper](http://groupware.les.inf.puc-rio.br/har)  \n\n### Summary of results\nThe final model chosen for the prediction of the \"classe\" variable was a Random Forest.  The model was built with a randomly selected training set consisting of 75% of the observations, with the additional 25% being set aside for cross-validation.  \nThe **out of sample error** from the random forest is estimated to be between 99.27% and 99.69% with 95% confidence.   For full details of the performance of the model see the section titled *\"Method 2 - Random Forest\"* below.\n\n### Getting the data and loading required packages\nFor reproducibility the data is obtained directly from the course website.\n\n```{r}\n#downloading the files from the coursera page for reproducibility\n\nfileUrl.train<-\"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\"\n#dbtrain<-read.csv(text=fileUrl.train, na.strings=c(\"\",\"NA\"))\ndownload.file(fileUrl.train, destfile=\"pml-training.csv\")\n\nfileUrl.test<-\"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\"\n#dbtest<-read.csv(text=fileUrl.test, na.strings=c(\"\",\"NA\"))\ndownload.file(fileUrl.test, destfile=\"pml-testing.csv\")\n\ndbtrain<-read.csv(\"pml-training.csv\", na.strings=c(\"\",\"NA\"))\ndbtest<-read.csv(\"pml-testing.csv\", na.strings=c(\"\",\"NA\"))\n\n# the following packages are required for running the code\nlibrary(caret)\nlibrary(ggplot2)\nlibrary(rpart)\nlibrary(randomForest)\n```\n\n### Data preparation and Cleaning  \nThere were many columns in the raw csv file that were not used for the analysis.  Inital inspection of the variables in the data set led me to remove several columns.  Some were obviously not relevant for prediction for example (Record Number, raw\\_time, new\\_window,...).  Additionally, many of the columns included in the dataset appeart to be summary statistics for each exercise repitition (skewnesses, averages, standard deviations for example).  Most of these quantities were absent in the data set provided and were therefore not used in the prediction exercise.  These sparse columns were found and excluded using R by calculating columns with greater than 95% missing values.  The following is a summary of the rationale and approach for removing these columns from the data:  \n\n1. drop all columns that should not be used for prediction  \n2. drop all of the columns that are summary statistics or have a high percentage of missing\n- X (row number), raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp, new_window, num_window\nThese are all data about when the experiment was run or the time during the exercise, while i think the experimenters actually used summary statistics to predict (calculating summary stats across the windows)our test set does not treat the data this way and they are of no use to us. \n\n```{r, cache=TRUE}\n        # calculate the percent missing\n          permiss<-sapply(dbtrain, function(x) sum(is.na(x))/length(x))\n\n        #identify columns with >.95 of values missing\n          highmiss<-permiss>.95\n\n        #drop these columns from the datasets\n          dbtrain<-dbtrain[,highmiss==FALSE]\n          dbtest<-dbtest[,highmiss==FALSE]\n\n        #drop illogical predictors (demographic type variables)\n          not_used<-c(\"X\", \"raw_timestamp_part_1\", \"raw_timestamp_part_2\", \"cvtd_timestamp\", \"new_window\", \"num_window\")\n          dbtrain<-dbtrain[,!( names(dbtrain) %in% not_used)]\n          dbtest<-dbtest[,!( names(dbtest) %in% not_used)]\n\n#  Plotting all x-variables by user_name and colored by classe (commented out so they dont overwhelm the report)\n#\n#   xvar<-names(training)  # for graph titles\n#\n#      for(i in 2:53) {print(qplot(user_name, training[,i], data=training, color=classe, geom=\"jitter\", main=xvar[i]))}\n#                       \n#\n\n```\n\n### Exploring the predictor data\n\nA series of plots were generated to explore the data.  Each predictor value was plotted against the subject (user_name) and each data point colored by the exercise classification (classe).  An example plot is shown here.  The figure shows that the \"roll belt\" metric may be a useful predictor (in fact it turns out to be one of the most influential predictors) see figure 3. \n\n**Figure 1** - Exploring the predictors, roll belt relation to class.  \n```{r}\n  print(qplot(user_name, roll_belt, data=dbtrain, color=classe, geom=\"jitter\", main=\"Belt Roll vs. User, Colored by Classe\"))\n```\n\nWhile there were many unusual observations in the data.  For example, there seemed to be issues with the subjects Jerome and Adelmo sensors reading zero for all repititions, and some values with extreme magnitudes.  \n\n**Figure 2** - Unusual observations (all zeros) for Adelmo  \n```{r}\n  print(qplot(user_name, yaw_forearm, data=dbtrain, color=classe, geom=\"jitter\", main=\"Forearm Yaw vs. User, Colored by Classe\"))\n```\n  \n  \nAll of these values were kept in the dataset, since my knowledge of what these observations mean is greatly limited by not having access to a good description of the data and what issues the experimenters may have run into.  The Random Forest model that was built did not appear to be sensitive to these values since the resulting predictions on both the test set and the validation set were quite good.\n\n### The Machine Learning Process  \n\nThe data set was partitioned using the caret partitioning funtion to produce a data set that consisted of 75% of the data for training and 25% for cross validation.  SOme quick diagnostics looking for near zero variance predictors were run. The results did not show any low variance predictors.\n\n```{r, cache=TRUE}\n  set.seed(845)\n\n    ltrain<-createDataPartition(y=dbtrain$classe, p=.75, list=FALSE)\n        training<-dbtrain[ltrain,]\n        test<-dbtrain[-ltrain,]\n\n# Quick predictor diagnostics - looking for ones with near zero variation \n\n    nzv<-nearZeroVar(training, saveMetrics=TRUE)\n    sum(nzv$nzv)\n    \n```\n\n  \n#### Method 1 - Recursive partitioning  \nFirst a recursive partitioning tree was fit with no bagging or boosting.  For this model the in-sample and out of sample accuracies were poor (in sample = .49 , out of sample = 0.50).  \n\n```{r, cache=TRUE}\n#           model fit for recursive partitioning \n\nmodelFit.rp<-train(classe ~., data=training, method=\"rpart\")\n\n#cross validation on test set\npredictions.rp<-predict(modelFit.rp, newdata=test)\nconfusionMatrix(predictions.rp, test$classe)\n```\n\n#### Method 2 - Random Forest  \nNext a Random Forest approach to fitting the model was employed.  Difficulties with using the train function forced me to move to the package randomForest.  This method had very high out of sample accuracy >99.3% at the 97.5 confidence level. \n\n```{r, cache=TRUE}\n#               Model Fitting Random Forest Model\n\nmodelFit<-randomForest(classe~., data=training)\n\n#cross validation on test set\npredictions<-predict(modelFit, newdata=test)\nconfusionMatrix(predictions, test$classe)\n```\n  \n  \nThe following plot shows the variables that had the most impact on reducing the Gini index (measure of impurity).  The plot shows the largest impact s were made by the top 8 variables in the chart. \n- roll\\_belt through roll\\_dumbell.  \n\n**Figure 3** - Mean decrease in Gini index by predictor variable.\n```{r}\nvarImpPlot(modelFit)\n```\n\n  \n  \n*Final Predictions*  \n\nFinally the predeictions against the 20 test cases were made.  The results (as judged by the submital), all test cases were predicted correctly.  \n\n```{r}\n#predictions for final test set\npredictions.final<-predict(modelFit, newdata=dbtest)\ndata.frame(sample=1:20, prediction=predictions.final)\n```\n\n\n\n\n",
    "created" : 1424611955147.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "251300997",
    "id" : "2BC08454",
    "lastKnownWriteTime" : 1424612301,
    "path" : "~/GitHub/ML-Project2015/finalreport_markdown.Rmd",
    "project_path" : "finalreport_markdown.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}